trigger:
 branches:
   include:
     - main
       feature/*

parameters:
  - name: runInstallTerraform
    type: boolean
    default: true
  - name: runInit
    type: boolean
    default: true
  - name: runFmt
    type: boolean
    default: true
  - name: runValidate
    type: boolean
    default: true
  - name: runPlan
    type: boolean
    default: true
  - name: runApply
    type: boolean
    default: false
  - name: runDestroy
    type: boolean
    default: false

variables:
  config_path: '$(System.DefaultWorkingDirectory)'
  svc_connection: 'newsc'

stages:
  - stage: TerraformBuild
    displayName: "Terraform Build Stage"
    jobs:
      - job: InstallTerraform
        displayName: "Install Terraform"
        condition: and(succeeded(), eq('${{ parameters.runInstallTerraform }}', true))
        pool: New_agent
        steps:
          - task: TerraformInstaller@1
            displayName: "Terraform Install"
            inputs:
              terraformVersion: 'latest'

      - job: TerraformInit
        displayName: "Terraform Init"
        dependsOn: InstallTerraform
        condition: and(succeeded(), eq('${{ parameters.runInit }}', true))
        pool: New_agent
        steps:
        - task: TerraformTask@5
          displayName: Terraform init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: $(config_path)
            backendServiceArm: $(svc_connection)
            backendAzureRmStorageAccountName: 'dkcstorageaccount'
            backendAzureRmContainerName: 'dkccontainer'
            backendAzureRmKey: 'terraform2.tfstate' 
      - job: TerraformFmt
        displayName: "Terraform Fmt"
        dependsOn: TerraformInit
        condition: and(succeeded(), eq('${{ parameters.runFmt }}', true))
        pool: New_agent
        steps:
          - task: TerraformTask@5
            displayName: Terraform fmt
            inputs:
              provider: 'azurerm'
              command: 'custom'
              workingDirectory: $(config_path)
              outputTo: 'console'
              customCommand: 'fmt'
              environmentServiceNameAzureRM: $(svc_connection)
          - task: tfsec@1
            inputs:
              version: 'v1.26.0'
              dir: '$(System.DefaultWorkingDirectory)'

      - job: TerraformValidate
        displayName: "Terraform Validate"
        dependsOn: TerraformFmt
        condition: and(succeeded(), eq('${{ parameters.runValidate }}', true))
        pool: New_agent
        steps:
          - task: TerraformTask@5
            displayName: Terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: $(config_path)
              backendServiceArm: $(svc_connection)
              backendAzureRmStorageAccountName: 'dkcstorageaccount'
              backendAzureRmContainerName: 'dkccontainer'
              backendAzureRmKey: 'terraform2.tfstate'
          - task: TerraformTask@5
            displayName: Terraform validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: $(config_path)

      - job: TerraformPlan
        displayName: "Terraform Plan"
        dependsOn: TerraformValidate
        condition: and(succeeded(), eq('${{ parameters.runPlan }}', true))
        pool: New_agent
        steps:
          - task: TerraformTask@5
            displayName: Terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: $(config_path)
              backendServiceArm: $(svc_connection)
              backendAzureRmStorageAccountName: 'dkcstorageaccount'
              backendAzureRmContainerName: 'dkccontainer'
              backendAzureRmKey: 'terraform2.tfstate'
          - task: TerraformTask@5
            displayName: Terraform plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: $(config_path)
              environmentServiceNameAzureRM: $(svc_connection)

  - stage: ManualApproval
    displayName: "Manual Approval Before Apply"
    dependsOn: TerraformBuild
    condition: and(succeeded(), eq('${{ parameters.runApply }}', true))
    jobs:
      - job: WaitForApproval
        displayName: "Wait for Manual Approval"
        pool: server  # ðŸ‘ˆ Required for agentless manual validation
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please review the Terraform plan and approve to proceed with apply.'
              approvers: 'amitkkc01@gmail.com'
              notifyUsers: 'amitkkc01@gmail.com'
              onTimeout: 'reject'
              timeout: '1d'  

  - stage: TerraformApplyStage
    displayName: "Terraform Apply Stage"
    dependsOn: ManualApproval
    condition: and(succeeded(), eq('${{ parameters.runApply }}', true))
    jobs:
      - job: TerraformApply
        displayName: "Terraform Apply"
        pool: New_agent
        steps:
          - task: TerraformTask@5
            displayName: Terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: $(config_path)
              backendServiceArm: $(svc_connection)
              backendAzureRmStorageAccountName: 'dkcstorageaccount'
              backendAzureRmContainerName: 'dkccontainer'
              backendAzureRmKey: 'terraform2.tfstate'
          - task: TerraformTask@5
            displayName: Terraform apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: $(config_path)
              environmentServiceNameAzureRM: $(svc_connection)
              commandOptions: '-auto-approve'

  - stage: ManualApproval1
    displayName: "Manual Approval Before Destroy"
    dependsOn: TerraformBuild
    condition: and(succeeded(), eq('${{ parameters.runDestroy }}', true))
    jobs:
      - job: WaitForApproval
        displayName: "Wait for Manual Approval"
        pool: server  # ðŸ‘ˆ Required for agentless manual validation
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: 'Please review the Terraform plan and approve to proceed with apply.'
              onTimeout: 'reject'
              timeout: '1d'  # Timeout after 1 day

  - stage: TerraformDestroyStage
    displayName: "Terraform Destroy Stage"
    dependsOn: ManualApproval1
    condition: and(succeeded(), eq('${{ parameters.runDestroy }}', true))
    jobs:
      - job: TerraformDestroy
        displayName: "Terraform Destroy"
        pool: New_agent
        steps: 
        - task: TerraformTask@5
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: $(config_path)
            backendServiceArm: $(svc_connection)
            backendAzureRmStorageAccountName: 'dkcstorageaccount'
            backendAzureRmContainerName: 'dkccontainer'
            backendAzureRmKey: 'terraform2.tfstate'

        - task: TerraformTask@5
          displayName: Terraform Destroy
          inputs:
            provider: 'azurerm'
            command: 'destroy'
            commandOptions: '-auto-approve'
            environmentServiceNameAzureRM: 'newsc'
            