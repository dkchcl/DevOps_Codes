trigger:
 branches:
   include:
     - main
       feature/*

pool: New_agent

parameters:
- name: Enviroment
  displayName: Enviroment
  type: string
  values:
    - Dev
    - Prod
- name: ScanCode
  displayName: ScanCode
  type: string
  values:
    - true
    - false 
- name: Validation
  displayName: Validation
  type: string
  values:
    - true
    - false        

variables:
  workdir: '$(System.DefaultWorkingDirectory)/Enviroment/${{parameters.Enviroment}}'
  service_connection: 'newsc'

stages:
  - stage: BuildStage
    displayName: Build
    jobs:  
    - job: Build
      displayName: Terraform install, init, validate
      steps:
      - task: TerraformInstaller@1
        displayName: Terraform install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTask@5
        displayName: Terraform init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(workdir)
          backendServiceArm: $(service_connection)
          backendAzureRmStorageAccountName: 'dkcstorageaccount'
          backendAzureRmContainerName: 'dkccontainer'
          backendAzureRmKey: '${{parameters.Enviroment}}.tfstate'
      - task: TerraformTask@5
        displayName: Terraform validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: $(workdir)
      - task: TerraformTask@5
        displayName: terraform fmt
        inputs:
          provider: 'azurerm'
          command: 'custom'
          workingDirectory: $(workdir)
          commandOptions: 'fmt'
          outputTo: 'console'
          environmentServiceNameAzureRM: $(service_connection)
      - task: TerraformTask@5
        displayName: terraform plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(workdir)
          environmentServiceNameAzureRM: $(service_connection)

  - stage: Scanning
    displayName: Scanning Code
    dependsOn: BuildStage 
    condition: and(succeeded(), eq('${{ parameters.ScanCode }}', true))
    jobs:
      - job: Scanning
        displayName: Scanning terraform code
        steps:
        - task: tfsec@1
          displayName: TFSec
          inputs:
            version: 'v1.26.0'
        - task: PowerShell@2
          displayName: TFLint
          inputs:
            targetType: 'inline'
            script: |
              cd $(System.DefaultWorkingDirectory)/Enviroment/Dev
              TFLINT
              Write-Host "Hello World"

  - stage: ManualApproval
    displayName: Manual Approval
    jobs:
      - job: ManualApproval
        displayName: Manual Approval before Apply
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
        pool:
          name: server
        steps:
        - task: ManualValidation@0
          displayName: Manual Validation
          inputs:
            instructions: 'Approve to proceed with Terraform Apply.'
            approvers: 'dkc.hcl@gmail.com'
            notifyUsers: 'dkc.hcl@gmail.com'
            onTimeout: 'reject'
            timeout: '1d'    
  - stage: DeployStage
    displayName: Deploy Stage
    dependsOn: ManualApproval
    jobs:
      - job: Apply
        displayName: Terraform Apply
        steps:
        - task: TerraformTask@5
          displayName: Terraform init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: $(workdir)
            backendServiceArm: $(service_connection)
            backendAzureRmStorageAccountName: 'dkcstorageaccount'
            backendAzureRmContainerName: 'dkccontainer'
            backendAzureRmKey: '${{parameters.Enviroment}}.tfstate'
        - task: TerraformTask@5
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: $(workdir)
            environmentServiceNameAzureRM: 'newsc'


